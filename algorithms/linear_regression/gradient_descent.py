import numpy as np

# üìå –î–ê–ù–ù–´–ï: —Ä–æ—Å—Ç, –≤–æ–∑—Ä–∞—Å—Ç ‚Üí –≤–µ—Å
X = np.array([
    [1.7, 25],
    [1.8, 30],
    [1.6, 20],
    [1.75, 35],
    [1.65, 40],
    [1.85, 45],
    [1.55, 18],
    [1.70, 29],
    [1.78, 33],
    [1.62, 21]
])
y = np.array([70, 80, 55, 78, 65, 90, 50, 74, 82, 58])  # –†–µ–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞

# üìå 1. –î–ï–õ–ò–ú –î–ê–ù–ù–´–ï –í–†–£–ß–ù–£–Æ (80% train, 20% validation)
N = len(X)  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
split_idx = int(N * 0.8)  # –ò–Ω–¥–µ–∫—Å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–∑–¥–µ–ª—è–µ–º train –∏ val

X_train, X_val = X[:split_idx], X[split_idx:]  # 80% –≤ train, 20% –≤ validation
y_train, y_val = y[:split_idx], y[split_idx:]  # 80% –≤ train, 20% –≤ validation

# üìå 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–µ—Å–∞
w1, w2 = np.random.randn(), np.random.randn()
b = np.random.randn()

# üìå 3. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
learning_rate = 0.01
epochs = 1000
patience = 10  # Early Stopping (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏)
best_loss = float('inf')
no_improve_count = 0

# üìå 4. –§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å (MSE)
def mse(y_true, y_pred):
    return np.mean((y_true - y_pred) ** 2)

# üìå 5. –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ + Early Stopping
for epoch in range(epochs):
    y_pred = w1 * X_train[:, 0] + w2 * X_train[:, 1] + b  # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    loss = mse(y_train, y_pred)  # –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫—É

    # üìå –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã
    dw1 = -2 * np.mean((y_train - y_pred) * X_train[:, 0])
    dw2 = -2 * np.mean((y_train - y_pred) * X_train[:, 1])
    db = -2 * np.mean(y_train - y_pred)

    # üìå –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞
    w1 -= learning_rate * dw1
    w2 -= learning_rate * dw2
    b -= learning_rate * db

    # üìå Early Stopping: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —É–ª—É—á—à–∏–ª–∞—Å—å –ª–∏ –º–æ–¥–µ–ª—å
    if loss < best_loss:
        best_loss = loss
        no_improve_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    else:
        no_improve_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ —É–ª—É—á—à–µ–Ω–∏–π –Ω–µ—Ç

    if no_improve_count >= patience:
        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ {epoch}-–π —ç–ø–æ—Ö–µ: –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ!")
        break

    # üìå –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –∫–∞–∂–¥—ã–µ 100 —ç–ø–æ—Ö
    if epoch % 100 == 0:
        print(f"–≠–ø–æ—Ö–∞ {epoch}, –û—à–∏–±–∫–∞: {loss:.3f}")

# üìå 6. –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞
print(f"üéØ –û–±—É—á–µ–Ω–Ω—ã–µ –≤–µ—Å–∞: w1={w1:.3f}, w2={w2:.3f}, b={b:.3f}")

# üìå 7. –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤–∞–ª–∏–¥–∞—Ü–∏—è)
y_val_pred = w1 * X_val[:, 0] + w2 * X_val[:, 1] + b
val_loss = mse(y_val, y_val_pred)
print(f"üìä –û—à–∏–±–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (MSE): {val_loss:.3f}")

# üìå 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
—Ä–æ—Å—Ç = 1.72
–≤–æ–∑—Ä–∞—Å—Ç = 28
–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π_–≤–µ—Å = w1 * —Ä–æ—Å—Ç + w2 * –≤–æ–∑—Ä–∞—Å—Ç + b
print(f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –≤–µ—Å –¥–ª—è —Ä–æ—Å—Ç–∞ {—Ä–æ—Å—Ç}–º –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ {–≤–æ–∑—Ä–∞—Å—Ç} –ª–µ—Ç: {–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π_–≤–µ—Å:.2f} –∫–≥")
