# üìå –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –≤ Jupyter Notebook

# **–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏**
import numpy as np
import matplotlib.pyplot as plt

# **1. –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ: —Ä–æ—Å—Ç, –≤–æ–∑—Ä–∞—Å—Ç ‚Üí –≤–µ—Å**
X = np.array([
    [1.7, 25], [1.8, 30], [1.6, 20], [1.75, 35],
    [1.65, 40], [1.85, 45], [1.55, 18], [1.70, 29],
    [1.78, 33], [1.62, 21]
])
y = np.array([70, 80, 55, 78, 65, 90, 50, 74, 82, 58])

# **2. –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ train –∏ validation (80% / 20%)**
N = len(X)
split_idx = int(N * 0.8)
X_train, X_val = X[:split_idx], X[split_idx:]
y_train, y_val = y[:split_idx], y[split_idx:]

# **3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–µ—Å–∞**
w1, w2 = np.random.randn(), np.random.randn()
b = np.random.randn()

# **4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è**
learning_rate = 0.01
epochs = 1000
losses = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –æ—à–∏–±–∫–∏

# **5. –§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å (MSE)**
def mse(y_true, y_pred):
    return np.mean((y_true - y_pred) ** 2)

# **6. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ—Ü–µ—Å—Å–∞**
for epoch in range(epochs):
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —Ç–µ–∫—É—â–∏–º –≤–µ—Å–∞–º
    y_pred = w1 * X_train[:, 0] + w2 * X_train[:, 1] + b
    loss = mse(y_train, y_pred)
    losses.append(loss)
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
    dw1 = -2 * np.mean((y_train - y_pred) * X_train[:, 0])
    dw2 = -2 * np.mean((y_train - y_pred) * X_train[:, 1])
    db = -2 * np.mean(y_train - y_pred)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤
    w1 -= learning_rate * dw1
    w2 -= learning_rate * dw2
    b -= learning_rate * db
    
    # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –∫–∞–∂–¥—ã–µ 100 —ç–ø–æ—Ö
    if epoch % 100 == 0:
        print(f"–≠–ø–æ—Ö–∞ {epoch}, –û—à–∏–±–∫–∞: {loss:.3f}")

# **7. –ì—Ä–∞—Ñ–∏–∫ —Å–Ω–∏–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ (Loss Curve)**
plt.figure(figsize=(8, 5))
plt.plot(losses, label='MSE Loss', color='blue')
plt.xlabel('–≠–ø–æ—Ö–∏')
plt.ylabel('–û—à–∏–±–∫–∞')
plt.title('–ì—Ä–∞—Ñ–∏–∫ —Å–Ω–∏–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏')
plt.legend()
plt.show()

# **8. –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤–∞–ª–∏–¥–∞—Ü–∏—è)**
y_val_pred = w1 * X_val[:, 0] + w2 * X_val[:, 1] + b
val_loss = mse(y_val, y_val_pred)
print(f"üìä –û—à–∏–±–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (MSE): {val_loss:.3f}")

# **9. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö**
—Ä–æ—Å—Ç = 1.72
–≤–æ–∑—Ä–∞—Å—Ç = 28
–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π_–≤–µ—Å = w1 * —Ä–æ—Å—Ç + w2 * –≤–æ–∑—Ä–∞—Å—Ç + b
print(f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –≤–µ—Å –¥–ª—è —Ä–æ—Å—Ç–∞ {—Ä–æ—Å—Ç}–º –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ {–≤–æ–∑—Ä–∞—Å—Ç} –ª–µ—Ç: {–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π_–≤–µ—Å:.2f} –∫–≥")
